- hosts:
  - all

  tasks:
    - name: "Upgrade system"
      apt:
        upgrade: dist
        update_cache: yes

    - name: "Install packages"
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - vim-nox
        - mc
        - iotop
        - netcat
        - postgresql-9.6
        - pgpool2
        - arping
        - net-tools

    - name: "Activate master/slave replication"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^master_slave_mode\\s*=.*'
                  insertbefore='^#master_slave_mode = off'
                  line='master_slave_mode = on'

    - name: "Set replication mode to streaming"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^master_slave_sub_mode\\s*=.*'
                  insertbefore='^#master_slave_sub_mode = \'slony\''
                  line='master_slave_sub_mode = \'stream\''

    - name: "Set pgpool2 port"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^port\\s*=\\s*\\d+.*'
                  insertbefore='^#port = 5433'
                  line='port = 5431'

    - name: "Activate load balancing"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^load_balance_mode\\s*=.*'
                  insertbefore='^#load_balance_mode = off'
                  line='load_balance_mode = on'


    - name: "Enable health check for enabling automatic failover"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^health_check_period\\s*=.*'
                  insertbefore='^#health_check_period = 0'
                  line='health_check_period = 5'

    - name: "Set health check user"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^health_check_user\\s*=.*'
                  insertbefore='^#health_check_user = \'nobody\''
                  line='health_check_user = \'{{ hcuser }}\''

    - name: "Set health check password"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^health_check_password\\s*=.*'
                  insertbefore='^#health_check_password = \'\''
                  line='health_check_password = \'{{ hcpass }}\''

    - name: "Set health check retries"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^health_check_max_retries\\s*=.*'
                  insertbefore='^#health_check_max_retries = 0'
                  line='health_check_max_retries = 6'

    - name: "Enable watchdog functionality"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^use_watchdog\\s*=.*'
                  insertbefore='^#use_watchdog = off'
                  line='use_watchdog = on'

    - name: "Set watchdog source IP"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^wd_hostname\\s*=.*'
                  insertbefore='^#wd_hostname = \'\''
                  line='wd_hostname = \'{{ inventory_hostname }}\''

    - name: "Set virtual IP address"
      lineinfile: dest=/root/pgpool.conf
                  regexp='^delegate_IP\\s*=.*'
                  insertbefore='^#delegate_IP = \'\''
                  line='delegate_IP = \'{{ fip }}\''

    - name: "check me out"
      debug:
        msg: "I'm {{ inventory_hostname }} running for {{ item }} with index {{ lpos }}"
      when: item != inventory_hostname
      loop: '{{ ansible_play_batch }}'
      loop_control:
        index_var: lpos

    - name: "Disable default backend"
      replace:
        path: /root/pgpool.conf
        regexp: '(^backend_hostname0\s+=\s+.+\n(\s+#\s+.*\n)+)(^backend_port0\s+=\s+.+\n(\s+#\s+.*\n)+)(^backend_weight0\s+=\s+.+\n(\s+#\s+.*\n)+)(^backend_data_directory0\s+=\s+.+\n(\s+#\s+.*\n)+)(^backend_flag0\s+=\s+.+\n(\s+#\s+.*\n)+)'
        replace: '# \1# \3# \5# \7# \9'

    - name: "Add PostreSQL Backends"
      blockinfile:
        path: /root/pgpool.conf
        insertbefore: "# - Authentication -"
        marker: "# {mark} Add backend{{ lpos }} -- {{ item }}"
        content: |
          backend_hostname{{ lpos }} = '{{ item }}'
          backend_port{{ lpos }} = 5432
          backend_weight{{ lpos }} = 1
          backend_data_directory{{ lpos }} = /var/lib/postgresql/9.6/main
          backend_flag{{ lpos }} = 'ALLOW_TO_FAILOVER'
      loop: '{{ ansible_play_batch }}'
      loop_control:
        index_var: lpos

